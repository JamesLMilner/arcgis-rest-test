#-------------------------------------------------------------------------------
# Name:        module1
# Purpose:
#
# Author:      mwells
#
# Created:     14/07/2014
# Copyright:   (c) mwells 2014
# Licence:     <your licence>
#-------------------------------------------------------------------------------

#
# Execute: python storagecredits.py <configfile> <configsection>
#

import portalpy
import agolpy
import time
from time import gmtime, strftime
import datetime
import math
import ConfigParser, sys

def parseConfig(configFile, section):
    config = ConfigParser.ConfigParser()
    config.readfp(open(configFile))
    conf = {}
    for key in config.options(section):
        conf[key] = config.get(section, key)
    return conf

def convertSize(size):
   """Converts a number (of bytes) into a readable string representation (eg KB)"""
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   s=0
   if (size > 0):
       i = int(math.floor(math.log(size,1024)))
       p = math.pow(1024,i)
       s = round(size/p,2)
   if (s > 0):
       return '%s %s' % (s,size_name[i])
   else:
       return '0 B'

def displayStorage(storage):
    """Returns human-readable storage type from a code-level type"""
    storageType = "unknown"
    if storage == "file":
        storageType = "File Storage"
    elif storage == "feature":
        storageType = "Feature Storage"
    return storageType

def addToDict(dictionary, key, val):
    """Checks whether the dictionary contains the item. If not, adds the item; if so, increments the item"""
    if dictionary.has_key(key):
        dictionary[key] += val
    else:
        dictionary[key] = val
    return

def main():
    # turn the config file into objects
    conf = parseConfig(sys.argv[1], sys.argv[2])

    # make unique filename from current time
    yr2013millis = 1.3569984e+12
    now = datetime.datetime.now()
    nowmillis = time.mktime(now.timetuple())*1e3 + now.microsecond/1e3
    delta = nowmillis - yr2013millis
    strFile = "%0.0f" % delta
    path = conf['outputfilebase']+strFile+".html"
    f = open(path, 'w')

    # set up the ArcGIS Online connection
    portalUrl           = conf['portalurl']
    portalAdminUser     = conf['username']
    portalAdminPassword = conf['password']

    # instantiate various objects
    summary = {}
    summarytypes = {}
    html = {}
    html['details'] = ""
    html['user'] = ""
    html['summary'] = ""
    html['summarytypes'] = ""

    # provide some default totals
    addToDict(summary, ('|total|', 'featurecost'),  0)
    addToDict(summary, ('|total|', 'featureitems'), 0)
    addToDict(summary, ('|total|', 'featuresize'),  0)
    addToDict(summary, ('|total|', 'filecost'),     0)
    addToDict(summary, ('|total|', 'fileitems'),    0)
    addToDict(summary, ('|total|', 'filesize'),     0)

    # get some Portal metadata
    portal = portalpy.Portal(portalUrl, portalAdminUser, portalAdminPassword)
    properties = portal.get_properties()
    nowTime = strftime("%a, %d %b %Y %H:%M:%S UTC", gmtime())
    html['properties'] = "<p>%s (%s.%s)<br />%s</p>" % (properties['name'], properties['urlKey'], properties['customBaseUrl'], nowTime)
    html['subscription'] = "<h3>%s (%s.%s)</h3><p><b>Org Id:</b> %s (%s)<br /><b>Expiration Date:</b> %s<br /><b>Available Credits:</b> %s<br /><b>State:</b> %s<br /><b>Max Users:</b> %s<br /><b>Type:</b> %s</p><br /><p>Report generated by %s (%s) on %s" % (properties['name'], properties['urlKey'], properties['customBaseUrl'], properties['subscriptionInfo']['id'], properties['user']['orgId'], time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(properties['subscriptionInfo']['expDate']/1000)), properties['subscriptionInfo']['availableCredits'], properties['subscriptionInfo']['state'], properties['subscriptionInfo']['maxUsers'], properties['subscriptionInfo']['type'], properties['user']['fullName'], properties['user']['username'], nowTime)

    # generate a token for requests
    token = agolpy.getToken(portalAdminUser, portalAdminPassword)

    # FOR
    # for each user in the Portal
    resp = portal.get_org_users()
    for user in resp:

        # set up some parameters to capture information
        print user['username']
        summary[(user['username'], 'featureitems')] = 0
        summary[(user['username'], 'fileitems')] = 0
        summary[(user['username'], 'filesize')] = 0
        summary[(user['username'], 'filecost')] = 0.0
        summary[(user['username'], 'featuresize')] = 0
        summary[(user['username'], 'featurecost')] = 0.0
        summary[(user['username'], 'userstorage')] = user['storageUsage']

        # get the content for this user
        content = agolpy.getUserContent(token, user['username'])
        items = content['items']
        folders = content['folders']
        # append all items from all folders into one big list
        while len(folders) > 0:
            folderContent = agolpy.getUserContent(token, user['username'], folders.pop(0)['id'])
            items += folderContent['items']

        # FOR
        # for each item that the user owns
        for item in items:
            # set up the attributes we are interested in capturing
            attributes = ['owner', 'title', 'type', 'id', 'size', 'itemType', 'credits (/mth)', 'uploaded', 'modified', 'numViews', 'url', 'item']
            html['details'] += "<tr>"

            # get reusable values for this item
            size = float(item['size'])
            ttype = item['type']
            owner = item['owner']
            costDetails = [1024*1024*1024, 1.2, "file"]         # file -> 1.2 credits/GB/month
            if item['type'] == 'Feature Service':
                costDetails = [1024*1024*10, 2.4, "feature"]    # feature -> 2.4 credits/10MB/month
            cost = (size / costDetails[0]) * costDetails[1]

            # generate 'type' summary
            addToDict(summarytypes, (ttype, 'items'), 1)        # increment the count for items of this type
            addToDict(summarytypes, (ttype, 'size'), size)      # update the cumulative size for items of this type
            addToDict(summarytypes, (ttype,'cost'), cost)       # update the cumulative cost for items of this type
            summarytypes[(ttype,'costtype')] = costDetails[2]   # store the cost type (feature/file) for this item type

            # generate 'user' summary
            addToDict(summary, (owner, costDetails[2]+'items'), 1)      # increment the count for items for the relevant charge rate (file/feature) owned by this user
            addToDict(summary, (owner, costDetails[2]+'size'), size)    # update the cumulative size for items for the relevant charge rate (file/feature) owned by this user
            addToDict(summary, (owner, costDetails[2]+'cost'), cost)    # update the cumulative cost for items for the relevant charge rate (file/feature) owned by this user

            addToDict(summary, ('|total|', costDetails[2]+'items'), 1)      # increment the count for the total number of items for the relevant charge rate (file/feature) in this Portal
            addToDict(summary, ('|total|', costDetails[2]+'size'), size)    # update the cumulative size for the total number of items for the relevant charge rate (file/feature) in this Portal
            addToDict(summary, ('|total|', costDetails[2]+'cost'), cost)    # update the cumulative cost for the total number of items for the relevant charge rate (file/feature) in this Portal

            # generate an html representation for this item - for the 'details' tab
            while len(attributes) > 0:
                thisKey = attributes.pop(0)
                if thisKey == 'credits (/mth)':
                    html['details'] += "<td>%.3f</td>" % cost
                elif thisKey == 'uploaded' or thisKey == 'modified':
                    html['details'] += "<td>%s</td>" % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(item[thisKey]/1000))
                else:
                    thisVal = item[thisKey]
                    if type(thisVal) is str and thisVal.encode('utf-8').startswith('http'):
                        thisVal = "<a href='%s' target='_blank'>%s</a>" % (thisVal.encode('utf-8'), thisVal.encode('utf-8'))
                    html['details'] += "<td>%s</td>" % thisVal

            html['details'] += "</tr>"

            # output some status info
            print "%s, %s" % (item['owner'], item['id'])

        # generate an html summary for this user - for the 'user summary' tab
        html['user'] += "<tr><td>%s</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%.3f</td><td>%.3f</td><td>%.3f</td></tr>" % ( user['username'], len(items), summary[(user['username'], 'userstorage')], summary[(user['username'], 'featuresize')]+summary[(user['username'], 'filesize')], summary[(user['username'], 'featuresize')], summary[(user['username'], 'filesize')], summary[(user['username'], 'filecost')]+summary[(user['username'], 'featurecost')], summary[(user['username'], 'featurecost')], summary[(user['username'], 'filecost')])

    # generate an html summary for the 'overall summary' tab
    tempset = set()
    keys = [item[0] for item in summarytypes if item[0] not in tempset and not tempset.add(item[0])]
    for ttype in keys:
        html['summarytypes'] += "<tr><td>%s</td><td>%d</td><td>%s</td><td>%s</td><td>%.3f</td></tr>" % (ttype, summarytypes[(ttype, 'items')], convertSize(summarytypes[(ttype, 'size')]), displayStorage(summarytypes[(ttype, 'costtype')]), summarytypes[(ttype, 'cost')])
    html['summary'] += "<tr><td>%s</td><td>%d</td><td>%s</td><td>%s</td><td>%.3f</td></tr>" % ("Feature Storage", summary[('|total|', 'featureitems')], convertSize(summary[('|total|', 'featuresize')]), "Storage Type", summary[('|total|', 'featurecost')])
    html['summary'] += "<tr><td>%s</td><td>%d</td><td>%s</td><td>%s</td><td>%.3f</td></tr>" % ("File Storage", summary[('|total|', 'fileitems')], convertSize(summary[('|total|', 'filesize')]), "Storage Type", summary[('|total|', 'filecost')])
    html['summary'] += "<tr><td>%s</td><td>%d</td><td>%s</td><td>%s</td><td>%.3f</td></tr>" % ("Total Storage", summary[('|total|', 'fileitems')]+summary[('|total|', 'featureitems')], convertSize(summary[('|total|', 'filesize')]+summary[('|total|', 'featuresize')]), "Total", summary[('|total|', 'filecost')]+summary[('|total|', 'featurecost')])
    print "\nDone."

    #write file
    f.write('<html> <head> <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css"> <link rel="stylesheet" type="text/css" href="http://jquery-datatables-row-grouping.googlecode.com/svn/trunk/media/css/demo_table.css"> <style> * {padding:0; margin:0;} html { background: #eee; padding:15px 15px 0; font-family:sans-serif; font-size:14px; } p, h2, h3 { margin-bottom:15px; } div { padding:10px; background:#fff; } .tabs li { list-style:none; display:inline; } .tabs a { padding:5px 10px; display:inline-block; background:#666; color:#fff; text-decoration:none; } .tabs a.active { background:#fff; color:#000; } </style> </head> <body> <h2>ArcGIS Online Credit Report</h2>')
    f.write((html['properties']).encode('utf-8'))
    f.write('<ul class="tabs"> <li><a href="#tab1">Overall Summary</a></li> <li><a href="#tab2">User Summary</a></li> <li><a href="#tab3">Details</a></li> <li><a href="#tab4">Subscription Info</a></li> </ul> <div id="tab1"> <h3>Summary View</h3> <table id="summary"> <thead> <tr><th>Item Type</th> <th>Total Items</th> <th>Total Size</th> <th>Listing Type</th> <th>Credits (/mth)</th> </tr> </thead> <tbody>')
    f.write((html['summary']).encode('utf-8'))
    f.write('</tbody> </table> <table id="summarytypes"> <thead> <tr><th>Item Type</th> <th>Total Items</th> <th>Total Size</th> <th>Storage Type</th> <th>Credits (/mth)</th> </tr> </thead> <tbody>')
    f.write((html['summarytypes']).encode('utf-8'))
    f.write('</tbody> </table> </div> <div id="tab2"> <h3>User View</h3> <table id="users"> <thead> <tr><th>Owner</th> <th>Number of Items</th> <th>Reported Storage (bytes)</th> <th>Calculated Storage (bytes)</th>  <th>Feature Storage (bytes)</th> <th>File Storage (bytes)</th> <th>Total Credit Cost (/mth)</th> <th>Feature Storage Credits (/mth)</th> <th>File Storage Credits (/mth)</th> </tr> </thead> <tbody>')
    f.write((html['user']).encode('utf-8'))
    f.write('</tbody> </table> </div> <div id="tab3" style="width:4000px"> <h3>Detailed View</h3> <table id="example"> <thead> <tr><th>Owner</th> <th>Title</th> <th>Type</th> <th>Id</th> <th>Size</th> <th>Item Type</th> <th>credits (/mth)</th> <th>Uploaded</th> <th>Last Modified</th> <th>Views</th> <th>Url</th> <th>Item</th> </tr> </thead> <tbody>')
    f.write((html['details']).encode('utf-8'))
    f.write('</tbody> </table> </div> <div id="tab4"">')
    f.write((html['subscription']).encode('utf-8'))
    f.write('</div> <script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js"></script> <script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js"></script> <script type="text/javascript" src="http://jquery-datatables-row-grouping.googlecode.com/svn/trunk/media/js/jquery.dataTables.rowGrouping.js"></script> <script> $(document).ready(function(){ $("ul.tabs").each(function(){ var $active, $content, $links = $(this).find("a"); $active = $($links.filter(''[href="''+location.hash+''"]'')[0] || $links[0]); $active.addClass("active"); $content = $($active[0].hash); $links.not($active).each(function () { $(this.hash).hide(); }); $(this).on("click", "a", function(e){ $active.removeClass("active"); $content.hide(); $active = $(this); $content = $(this.hash); $active.addClass("active"); $content.show(); e.preventDefault(); }); }); $("#example").dataTable({ "iDisplayLength": 100 }); $("#summary").dataTable().rowGrouping({ iGroupingColumnIndex: 3, bHideGroupingColumn: true, bExpandableGrouping: true }); $("#summarytypes").dataTable({ "iDisplayLength": 50 }).rowGrouping({ iGroupingColumnIndex: 3, bHideGroupingColumn: true, bExpandableGrouping: true }); $("#users").dataTable({ "iDisplayLength": 100 }); }); </script> </body> </html>')
    f.close();

if __name__ == '__main__':
    main()
